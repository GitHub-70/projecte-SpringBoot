<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.pj.sys.dao.SysMenuDao">

    <resultMap id="sysUserMenu" type="com.cy.pj.sys.po.SysUserMenu">
    
       <id property="id" column="id"/>
       <result property="name" column="name"/>
       <result property="url" column="url"/>
       <collection property="childs" 
                   ofType="com.cy.pj.sys.po.SysUserMenu">
          <id property="id" column="cid"/>
          <result property="name" column="cname"/>
          <result property="url" column="curl"/>
       </collection>
    </resultMap>
   <!-- 基于菜单id获取一级菜单和二级菜单 -->
    <select id="findUserMenus" resultMap="sysUserMenu">
       select p.id,p.name,p.url,c.id cid,c.name cname,c.url curl
       from sys_menus p left join sys_menus c
       on c.parentId=p.id
       where p.parentId is null and c.id in
       <foreach collection="menuIds" open="(" close=")" 
                 separator="," item="menuId">
               #{menuId}
       </foreach>
    </select>

    <select id="findPermissions" resultType="string">
        
         select permission
         from sys_menus
         where id in 
         <foreach collection="menuIds" open="(" close=")" 
                 separator="," item="menuId">
               #{menuId}
         </foreach>
    </select>
    
    <!--表示在当前命名空间(namespace)下启动默认的二级缓存配置 -->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象
  
        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。
  
        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象
  
        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改，若修改缓存，会拷贝成新的缓存实例，修改的是新的缓存实例
        查询缓存时，还是原来缓存的实例（数据）
        当为true时，表示为只读的缓存实例对象，若修改了缓存实例对象，该原缓存实例对象被修改，返回修改后的数据，查询
        的是同一个缓存实例对象
        <cache/>闭合标签，表示当前namespace开启二级缓存
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="flase" size="1024"/>
    
    <!-- flushCache="true" 刷新二级缓存	默认为true立即刷新缓存 -->
    <update id="updateObject">
       update sys_menus
       set
         name=#{name},
         url=#{url},
         type=#{type},
         sort=#{sort},
         parentId=#{parentId},
         permission=#{permission},
         modifiedTime=now(),
         modifiedUser=#{modifiedUser}
       where id=#{id}
    </update>

	<!-- 不刷新缓存，需等到设置上面 设置缓存的刷新时间后，才刷新缓存，即无操作后10秒后刷新 -->
	<insert id="insertObject" flushCache="false">
		insert into sys_menus
		(name,url,type,sort,note,parentId,permission,
		createdTime,modifiedTime,createdUser,modifiedUser)
		values
		(#{name},#{url},#{type},#{sort},#{note},#{parentId},
		#{permission},now(),now(),#{createdUser},#{modifiedUser})
	</insert>

	<!-- 查询所有菜单以及菜单对应的上级菜单名称 useCache="false" 表示该查询方法不使用二级缓存-->
	<select id="findObjects" resultType="com.cy.pj.sys.po.SysMenu" useCache="true">
		<!-- 方案1:嵌套查询 -->
		<!-- select c.*,(select p.name from sys_menus p where c.parentId=p.id) 
			parentName from sys_menus c -->
		<!-- 方案2：多表左外关联查询 左外关联：左边表满足条件和不满足条件的都要显示， 右边表不满足条件的则显示null -->
		select c.*,p.name parentName
		from sys_menus c left join sys_menus p
		on c.parentId=p.id
	</select>
	
	<!-- 删除方法在Dao层，没有用到mapper文件中的刷新缓存 -->
	<!-- 注意service层，也有缓存的注解 @Cacheable，注意区分开 -->
</mapper>